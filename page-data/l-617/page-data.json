{"componentChunkName":"component---src-templates-post-jsx","path":"/l-617/","result":{"data":{"site":{"siteMetadata":{"title":"alex-roh.github.io"}},"markdownRemark":{"id":"3835e5aa-10c9-5a4d-874d-0807e08d7067","excerpt":"1. 문제 설명 두 이진 트리의 root1과 root2가 주어지면 이 둘을 병합하시오. (단, 겹치는 노드가 있으면 그 둘의 합을 새로운 노드로 한다.) 41 2. 제약 조건 병합은 트리의 루트에서부터 이루어져야 한다. 한 트리에 있는 노드의 개수는 0개 이상 2000개 이하다. 노드의 값은 \\(-10^4\\) 이상 \\(10^4\\) 이하다. 3. 접근 재귀…","html":"<h2>1. 문제 설명</h2>\n<p>두 이진 트리의 root1과 root2가 주어지면 이 둘을 병합하시오. (단, 겹치는 노드가 있으면 그 둘의 합을 새로운 노드로 한다.)</p>\n<p><img src=\"https://user-images.githubusercontent.com/54312875/116778924-81e1f500-aaaf-11eb-9e59-23138d42d3a4.png\" alt=\"41\"></p>\n<hr>\n<h2>2. 제약 조건</h2>\n<ol>\n<li>병합은 트리의 루트에서부터 이루어져야 한다.</li>\n<li>한 트리에 있는 노드의 개수는 0개 이상 2000개 이하다.</li>\n<li>노드의 값은 \\(-10^4\\) 이상 \\(10^4\\) 이하다.</li>\n</ol>\n<hr>\n<h2>3. 접근</h2>\n<p>재귀적으로 트리를 DFS 순회하되, 매 단계마다 새로운 노드를 만들었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    TreeNode<span class=\"token operator\">*</span> <span class=\"token function\">mergeTrees</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> root1<span class=\"token punctuation\">,</span> TreeNode<span class=\"token operator\">*</span> root2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        \n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root1 <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span> <span class=\"token operator\">&amp;&amp;</span> root2 <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n        \n        TreeNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root1 <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span> <span class=\"token operator\">&amp;&amp;</span> root2 <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            root<span class=\"token operator\">-></span>val <span class=\"token operator\">=</span> root1<span class=\"token operator\">-></span>val <span class=\"token operator\">+</span> root2<span class=\"token operator\">-></span>val<span class=\"token punctuation\">;</span>\n            root<span class=\"token operator\">-></span>left <span class=\"token operator\">=</span> <span class=\"token function\">mergeTrees</span><span class=\"token punctuation\">(</span>root1<span class=\"token operator\">-></span>left<span class=\"token punctuation\">,</span> root2<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            root<span class=\"token operator\">-></span>right <span class=\"token operator\">=</span> <span class=\"token function\">mergeTrees</span><span class=\"token punctuation\">(</span>root1<span class=\"token operator\">-></span>right<span class=\"token punctuation\">,</span> root2<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root1 <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span> <span class=\"token operator\">&amp;&amp;</span> root2 <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            root<span class=\"token operator\">-></span>val <span class=\"token operator\">=</span> root1<span class=\"token operator\">-></span>val<span class=\"token punctuation\">;</span>\n            root<span class=\"token operator\">-></span>left <span class=\"token operator\">=</span> <span class=\"token function\">mergeTrees</span><span class=\"token punctuation\">(</span>root1<span class=\"token operator\">-></span>left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            root<span class=\"token operator\">-></span>right <span class=\"token operator\">=</span> <span class=\"token function\">mergeTrees</span><span class=\"token punctuation\">(</span>root1<span class=\"token operator\">-></span>right<span class=\"token punctuation\">,</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root1 <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span> <span class=\"token operator\">&amp;&amp;</span> root2 <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            root<span class=\"token operator\">-></span>val <span class=\"token operator\">=</span> root2<span class=\"token operator\">-></span>val<span class=\"token punctuation\">;</span>\n            root<span class=\"token operator\">-></span>left <span class=\"token operator\">=</span> <span class=\"token function\">mergeTrees</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span> root2<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            root<span class=\"token operator\">-></span>right <span class=\"token operator\">=</span> <span class=\"token function\">mergeTrees</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span> root2<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>그러나 이 방식은 좋지 않은데, 굳이 새로 만들 필요가 없는 노드를 생성하고 있다는 점에서 낭비가 발생하기 때문이다. 두 트리의 노드가 겹치지 않으면 기존의 노드를 재활용하면 된다. </p>\n<p>사실, 노드가 겹쳐지더라도 굳이 새 노드를 만들 필요는 없다. 바뀌어야 하는 것은 노드의 값뿐이기 때문에, <strong>기존 노드의 값을 갱신</strong>하여 새로운 트리에 연결해 주었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    TreeNode<span class=\"token operator\">*</span> <span class=\"token function\">mergeTrees</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> root1<span class=\"token punctuation\">,</span> TreeNode<span class=\"token operator\">*</span> root2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        \n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root1 <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span> <span class=\"token operator\">&amp;&amp;</span> root2 <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root1 <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> root2<span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root2 <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> root1<span class=\"token punctuation\">;</span>\n        \n        root1<span class=\"token operator\">-></span>val <span class=\"token operator\">=</span> root1<span class=\"token operator\">-></span>val <span class=\"token operator\">+</span> root2<span class=\"token operator\">-></span>val<span class=\"token punctuation\">;</span>\n        root1<span class=\"token operator\">-></span>left <span class=\"token operator\">=</span> <span class=\"token function\">mergeTrees</span><span class=\"token punctuation\">(</span>root1<span class=\"token operator\">-></span>left<span class=\"token punctuation\">,</span> root2<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        root1<span class=\"token operator\">-></span>right <span class=\"token operator\">=</span> <span class=\"token function\">mergeTrees</span><span class=\"token punctuation\">(</span>root1<span class=\"token operator\">-></span>right<span class=\"token punctuation\">,</span> root2<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">return</span> root1<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<h2>4. 구현</h2>\n<p>두 번째 접근에서 아래 부분은 불필요한 코드다. 두 포인터 모두 <code class=\"language-text\">nullptr</code>인 경우, 그 두 개 중에서 하나만 반환하면 되기 때문이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root1 <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span> <span class=\"token operator\">&amp;&amp;</span> root2 <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이러한 점을 고려하여 최종적으로 리팩토링한 코드는 아래와 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    TreeNode<span class=\"token operator\">*</span> <span class=\"token function\">mergeTrees</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> root1<span class=\"token punctuation\">,</span> TreeNode<span class=\"token operator\">*</span> root2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        \n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root1 <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> root2<span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root2 <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> root1<span class=\"token punctuation\">;</span>\n        \n        root1<span class=\"token operator\">-></span>val <span class=\"token operator\">+=</span> root2<span class=\"token operator\">-></span>val<span class=\"token punctuation\">;</span>\n        root1<span class=\"token operator\">-></span>left <span class=\"token operator\">=</span> <span class=\"token function\">mergeTrees</span><span class=\"token punctuation\">(</span>root1<span class=\"token operator\">-></span>left<span class=\"token punctuation\">,</span> root2<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        root1<span class=\"token operator\">-></span>right <span class=\"token operator\">=</span> <span class=\"token function\">mergeTrees</span><span class=\"token punctuation\">(</span>root1<span class=\"token operator\">-></span>right<span class=\"token punctuation\">,</span> root2<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">return</span> root1<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>","frontmatter":{"title":"[L617] Merge Two Binary Trees","date":"May 01, 2021","update":"May 01, 2021","tags":["leetcode"],"series":"트리를 활용한 문제"},"fields":{"slug":"/l-617/","readingTime":{"minutes":1.655}}},"seriesList":{"edges":[{"node":{"id":"d2f9d7b0-7c48-5323-9a45-fdb8065bbead","fields":{"slug":"/l-543/"},"frontmatter":{"title":"[L543] Diameter of Binary Tree"}}},{"node":{"id":"3835e5aa-10c9-5a4d-874d-0807e08d7067","fields":{"slug":"/l-617/"},"frontmatter":{"title":"[L617] Merge Two Binary Trees"}}}]},"previous":{"fields":{"slug":"/l-543/"},"frontmatter":{"title":"[L543] Diameter of Binary Tree"}},"next":null},"pageContext":{"id":"3835e5aa-10c9-5a4d-874d-0807e08d7067","series":"트리를 활용한 문제","previousPostId":"d2f9d7b0-7c48-5323-9a45-fdb8065bbead","nextPostId":null}},"staticQueryHashes":[]}