{"componentChunkName":"component---src-templates-post-jsx","path":"/python-ch1/","result":{"data":{"site":{"siteMetadata":{"title":"Cave"}},"markdownRemark":{"id":"a6689fe8-c24e-55cd-bd1a-66938cb460fa","excerpt":"1. 객체와 자료형 파이썬에서는 메모리에 저장된 모든 데이터를 객체(object)라는 개념으로 처리한다. 자료형(data type)은 그러한 객체가 어떤 값(value)을 가지고, 어떤 행위(operation)를 할 수 있는지 정의한다. 예컨대 파이썬 인터프리터가 1, 2와 같은 정수 리터럴(literal)을 맞닥뜨리면, 파이썬은 이들을 int 객체로 변…","html":"<h2>1. 객체와 자료형</h2>\n<p>파이썬에서는 메모리에 저장된 모든 데이터를 <strong>객체(object)</strong>라는 개념으로 처리한다. <strong>자료형(data type)</strong>은 그러한 객체가 어떤 값(value)을 가지고, 어떤 행위(operation)를 할 수 있는지 정의한다.</p>\n<p>예컨대 파이썬 인터프리터가 1, 2와 같은 정수 리터럴(literal)을 맞닥뜨리면, 파이썬은 이들을 int 객체로 변환하여 메모리에 저장한다. 이 객체를 나중에 다시 불러오고 싶으면 이름을 붙이면 된다. 이렇게 붙여진 객체의 이름을 <strong>변수(variable)</strong>라고 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span>\n<span class=\"token comment\"># 1 + 2의 결과로 3이라는 객체를 만들고 a라는 이름을 붙인다.</span></code></pre></div>\n<p>어떤 객체의 정체성은 메모리에 존재하는 위치라고 할 수 있다. 두 객체가 같은 객체인지 여부를 알아보려면 메모리의 위치를 확인해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 객체 a가 메모리의 어느 위치에 있는지 알려주는 간접적인 주소를 출력한다.</span></code></pre></div>\n<p>여기서 알아볼 수 있는 파이썬의 중요한 특징 중 하나가 있는데, 바로 <strong>불변(immutable) 객체</strong>의 개념이다. 아래 코드를 실행하면 메모리의 주소가 다르게 출력되는데, 파이썬에서 정수 자료형은 불변 객체이므로 값을 바꾸면 메모리를 새로 배정해서 객체를 새로 만들기 때문이다. 즉, <code class=\"language-text\">=</code> 연산자를 통해 정수 1을 담고 있는 객체를 가리키는 주소에서 정수 2를 담고 있는 객체로 <code class=\"language-text\">a</code>의 <strong>주소가 바뀌었다</strong>고 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 1866154076528</span>\na <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n<span class=\"token builtin\">id</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 1866154076560</span></code></pre></div>\n<h2>2. 함수</h2>\n<p>함수(function)란 추후 불러와서 재사용할 수 있게 기능별로 분류한 코드의 묶음이다. </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">input_and_output</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  name <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"insert your name:\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Welcome\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span></code></pre></div>\n<h2>3. 흐름 제어</h2>\n<p>파이썬에서는 <code class=\"language-text\">if</code> 및 <code class=\"language-text\">else</code>를 통해 조건에 따라 실행 결과가 달라지도록 흐름을 제어(flow control)할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">i <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n<span class=\"token keyword\">if</span> i <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1 초과\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>또한, 조건을 넣어 특정 코드를 반복시킬 수도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 0, 1, 2가 출력됨</span></code></pre></div>\n<h2>4. 객체</h2>\n<p>VS code상에서 객체 이름 뒤에 .(마침표)을 찍으면 객체의 <strong>속성(attribute)</strong>과 <strong>메서드(method)</strong>를 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 객체 생성</span>\nb <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>__add__<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 객체의 메서드 사용</span></code></pre></div>\n<p>또한, <code class=\"language-text\">class</code> 키워드를 사용하여 <strong>사용자 정의 자료형(user defined data type)</strong>을 만들 수도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyInt</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    self<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value <span class=\"token comment\"># 인스턴스 변수</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 메서드</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"내가 만든 자료형\"</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n\na <span class=\"token operator\">=</span> MyInt<span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 객체 생성</span>\na<span class=\"token punctuation\">.</span><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 객체의 메서드 사용</span></code></pre></div>\n<h2>5. 모듈</h2>\n<p><strong>모듈(module)</strong>은 코드를 규격화하여 쉽게 가져와 쓸 수 있도록 한 것으로, <code class=\"language-text\">import</code> 키워드를 이용해 외부의 모듈을 불러올 수 있다. </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os\n<span class=\"token builtin\">type</span> os <span class=\"token comment\"># 객체 os의 자료형 : module</span>\nos<span class=\"token punctuation\">.</span>getcwd<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># os 모듈의 getcwd() 메서드 호출</span></code></pre></div>\n<h2>6. 숫자 자료형 및 연산</h2>\n<p>아래는 파이썬이 기본적으로 제공하는 숫자 자료형이다.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">자료형</th>\n<th align=\"center\">종류</th>\n<th align=\"center\">예시</th>\n<th align=\"center\">특징</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">int</td>\n<td align=\"center\">정수</td>\n<td align=\"center\">0, 1, -1, 7</td>\n<td align=\"center\"><strong>범위 무제한</strong></td>\n</tr>\n<tr>\n<td align=\"center\">float</td>\n<td align=\"center\">실수</td>\n<td align=\"center\">1.0, 3.14, 0.314e2</td>\n<td align=\"center\">부동소수점 표현법 (※ C의 double과 동일)</td>\n</tr>\n<tr>\n<td align=\"center\">complex</td>\n<td align=\"center\">복소수</td>\n<td align=\"center\">1.0 + 2.0j</td>\n<td align=\"center\">실수부와 허수부는 각각 float</td>\n</tr>\n</tbody>\n</table>\n<p>특이한 점은, 파이썬의 정수 자료형은 수의 범위가 (메모리가 허용하는 한) <strong>무한대</strong>라는 것이다. 파이썬은 수가 커지면 해당 객체에 더 많은 메모리를 할당한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sys\n\na <span class=\"token operator\">=</span> <span class=\"token number\">123</span>\nb <span class=\"token operator\">=</span> 3_903_832_102_389_244_353_548_354_345 <span class=\"token comment\"># 언더스코어로 끊어읽기 가능</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>getsizeof<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 28</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>getsizeof<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 40</span></code></pre></div>\n<p>또한 파이썬에서는 <code class=\"language-text\">int</code> 정수형끼리 <code class=\"language-text\">/</code> 연산자를 사용하여 나누더라도 결과가 <code class=\"language-text\">int</code>로 나오지 않는다. 정수 결과값을 얻고 싶다면, 소수점 이하 자리를 버림하여 출력하는 <code class=\"language-text\">//</code> 연산자를 사용하도록 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># float</span>\n<span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># int</span></code></pre></div>\n<p>그 외 절대값, 몫과 나머지를 한꺼번에 구하는 연산, 거듭제곱 연산자 및 거듭제곱 함수로 아래와 같은 것들이 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 3</span>\n<span class=\"token builtin\">divmod</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">## (3, 1) - 튜플(tuple)</span>\n<span class=\"token number\">2</span> <span class=\"token operator\">**</span> <span class=\"token number\">3</span> <span class=\"token comment\">## 2^3</span>\n<span class=\"token builtin\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">## 2^3</span></code></pre></div>\n<p>실수 리터럴을 기입할 때에는 과학적 표기법을 사용할 수도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token number\">3.1415e2</span> <span class=\"token comment\"># 314.15 (3.1415 * 10^2)</span></code></pre></div>\n<p>또한, 위에서 소수점 이하 자리를 버림하여 정수 값을 출력한다고 설명했던 <code class=\"language-text\">//</code> 연산자의 경우, <strong>피연산자 중에 실수 자료형이 하나라도 있으면</strong> 결과는 소수점 이하 자리가 모두 0인 실수 자료형이 되기에 주의해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.1</span> <span class=\"token operator\">//</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># float</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.1</span> <span class=\"token operator\">//</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 1.0</span></code></pre></div>\n<p>또한 실수 자료형의 경우, 연산 속도가 빠르다는 이점을 지닌 부동소수점 표현법이 채택되어 <strong>1) 부호 2) 유효숫자 3) 지수</strong> 세 가지로 나뉘어 저장된다. 예컨대 -3.141592의 경우, 1) -1 2) 3141592 3) <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mrow><mo>−</mo><mn>6</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">10^{-6}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">6</span></span></span></span></span></span></span></span></span></span></span></span>으로 나뉜다. 다만 내부적으로는 이진수로 저장되기 때문에, 10진수로 표현하면 정밀도 문제가 발생하게 된다.</p>\n<p>예컨대 아주 큰 숫자와 아주 작은 숫자가 더해지면, 아주 작은 숫자가 무시된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token number\">100000000000000000000000.0</span><span class=\"token operator\">+</span> <span class=\"token number\">1.2</span> <span class=\"token comment\"># 1e+23</span></code></pre></div>\n<p>또한 내부적으로 이진수로 저장됨에 따라, 소수점 이하 자리를 표현할 때 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mn>1</mn><mn>2</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{1}{2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mn>1</mn><mn>4</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{1}{4}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">4</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mn>1</mn><mn>8</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{1}{8}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">8</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>, ... 등의 조합으로 표현하기 때문에, 십진수를 사용하는 입장에서는 0.1 등의 숫자가 제대로 표현되지 않는다. 이 때문에, 수치적으로 매우 정밀해야 하는 분야에서는 부동소수점 표현법으로 발생하는 오차에 대해 잘 이해하고 있어야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token number\">0.1</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.1</span> <span class=\"token comment\"># 0.010000000000000002 (매우 작은 자리에서 오차 발생)</span></code></pre></div>","frontmatter":{"title":"파이썬 Ch. 1","date":null,"update":null,"tags":["python"],"series":"파이썬 문법"},"fields":{"slug":"/python-ch1/","readingTime":{"minutes":3.455}}},"seriesList":{"edges":[{"node":{"id":"24a5d293-e724-5a58-af32-674fad0abba1","fields":{"slug":"/python-formatter/"},"frontmatter":{"title":"파이썬 포매터 : Black"}}},{"node":{"id":"a6689fe8-c24e-55cd-bd1a-66938cb460fa","fields":{"slug":"/python-ch1/"},"frontmatter":{"title":"파이썬 Ch. 1"}}}]},"previous":{"fields":{"slug":"/python-formatter/"},"frontmatter":{"title":"파이썬 포매터 : Black"}},"next":null},"pageContext":{"id":"a6689fe8-c24e-55cd-bd1a-66938cb460fa","series":"파이썬 문법","previousPostId":"24a5d293-e724-5a58-af32-674fad0abba1","nextPostId":null}},"staticQueryHashes":[]}