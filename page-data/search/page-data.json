{"componentChunkName":"component---src-pages-search-jsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"nodes":[{"excerpt":"How to change the favicon? The favicon is located in . If you replace that image, the favicon will change. If you want to change the name of the favicon, change the  property of  in . Utterance is no…","fields":{"slug":"/other-tips/"},"frontmatter":{"date":"May 04, 2021","title":"🤩 4. Other Tips","tags":["hoodie","other-tips"]},"rawMarkdownBody":"\n## How to change the favicon?\n\nThe favicon is located in `static/favicon.png`. If you replace that image, the favicon will change.\n\nIf you want to change the name of the favicon, change the `icon` property of `gatsby-plugin-manifest` in `gatsby-config.js`.\n\n## Utterance is not working properly.\n\nIn the http environment, utterance may not work properly. Host your blog with https.\n\n## How to set OG Image?\n\nReplace the `og-image.png` file in the `/static` directory with your own image file.\n\n## Do you have another question?\n\nPlease comment on this article or [open an issue](https://github.com/devHudi/gatsby-starter-hoodie/issues) in the gatsby-starter-hoodie repository. Your participation advances gatsby-starter-hoodie. Thank you 😎.\n"},{"excerpt":"1. Add a post You can add posts by creating a new markdown document in the  path. 1-1. Post file structure There are two ways to add a new document. The first is to create a markdown file for a singl…","fields":{"slug":"/writing-guide/"},"frontmatter":{"date":"May 03, 2021","title":"🤔 3. Writing Guide","tags":["hoodie","writing-guide"]},"rawMarkdownBody":"\n## 1. Add a post\n\nYou can add posts by creating a new markdown document in the `contents/post` path.\n\n### 1-1. Post file structure\n\nThere are two ways to add a new document. The first is to create a markdown file for a single document without a directory. If you are writing about JavaScript, you can create a `about-javascript.md` file in the `contents/posts` directory.\n\nThe second is to create a directory and create an `index.md` file in it. This method is useful when the document contains several additional files such as picture files.\n\nEach file name or directory name becomes a unique address of the document and can be accessed as follows. `https://siteURL/about-javascript`.\n\n### 1-2. Frontmatter\n\nThe Markdown document you create contains the document's metadata called frontmatter.\n\n```\n---\ntitle: \"🤔 3. Writing Guide\"\ndescription: \"How to write and add a post?\"\ndate: 2021-05-03\nupdate: 2021-05-03\ntags:\n  - hoodie\n  - writing-guide\nseries: \"Getting started your blog with gatsby-starter-hoodie\"\n---\n```\n\nAbove is the frontmatter of the document you are currently reading. Among them, title and date are required. It is recommended to enclose the string with spaces in quotation marks.\n\n### 1-3. Writing markdown\n\nIf you have written a Frontmatter, you can write your markdown document under it. gatsby-starter-hoodie supports most Markdown syntax. To learn more about Markdown syntax, see the [Mastering Markdown](https://guides.github.com/features/mastering-markdown/) documentation on GitHub.\n\n## 2. Syntax Highlighting & Katex\n\n### 2-1. Syntax Highlighting\n\nSyntax highlighting based on Prism.JS is supported.\n\n#### Examples\n\nJavascript\n\n```javascript\nconsole.log(\"Hello, world!\")\n```\n\nPython\n\n```python\nprint(\"Hello, world!\")\n```\n\nIt supports a wider variety of other languages. Check it out on the [Prism.js website](https://prismjs.com/).\n\n### 2-2. Katex\n\nIt supports Katex syntax, you can easily express complex formulas.\n\n#### Inline mode\n\n$$E = m c^{2}$$\n\n#### Block mode\n\n$$\n\\int_{0}^{\\infty} f(x) dx\n$$\n\n## 3. Add images to a post\n\nYou can easily embed images using relative paths. It is easy to manage documents containing images by creating a directory.\n\n![Sample Image Caption](sample-image.jpg)\n\nImages are loaded with Lazy Loading, so you can secure fast document loading speed.\n\n> ⚠ The extension of the file must be set to lowercase.\n\n## 4. Tagging\n\n![](tag-example.jpg)\n\nYou can classify and search documents by tag set in Frontmatter. All tags you set can be viewed and searched in `https://siteUrl/tags`.\n\n## 5. Series\n\n![](series-example.jpg)\n\nYou can publish multiple related documents in a series. The series set in Frontmatter is grouped together and shown at the top of the document. This can be useful for serialized documents with an order. Series documents are displayed in ascending order of creation date.\n\nThe current document is also set in a series called `Getting started your blog with gatsby-starter-hoodie`.\n"},{"excerpt":"Getting started your blog with gatsby-starter-hoodie by following steps below. It's very easy 😉. 1. Create a Gatsby site Make sure you have node.js and gatsby-cli installed on your computer. 2. Start…","fields":{"slug":"/quick-start/"},"frontmatter":{"date":"May 02, 2021","title":"🚀 2. Quick Start","tags":["hoodie","quick-start"]},"rawMarkdownBody":"\nGetting started your blog with gatsby-starter-hoodie by following steps below. It's very easy 😉.\n\n## 1. Create a Gatsby site\n\n> Make sure you have **node.js** and **gatsby-cli** installed on your computer.\n\n```\n$ npx gatsby new my-hoodie-blog https://github.com/devHudi/gatsby-starter-hoodie\n```\n\n## 2. Start dev server\n\n```\n$ cd my-hoodie-blog\n$ npm run start\n```\n\nNow you can access to your blog at localhost:8000.\n\n## 3. Create your own Github repository\n\nUtterance comment widget is based on **Github issue system**. So you need your own GitHub repository. Also, if you want to publish your blog through Github Pages or Netlify, the Github Repository is a necessary.\n\nIf you don't know how to create a GitHub repository, follow the [official GitHub documentation](https://docs.github.com/en/github/getting-started-with-github/create-a-repo).\n\n### Add remote repository\n\n```\n$ git init\n$ git remote add origin https://github.com/{YOUR_GITHUB_NAME}/{YOUR_REPOSITORY_NAME}\n```\n\n## 4. Write blog-config.js\n\n```javascript\nmodule.exports = {\n  title: \"MY BLOG\",\n  description: \"Hello, This is my blog\",\n  author: \"YOUR NAME\",\n  siteUrl: \"https://myblog.com\",\n  links: {\n    github: \"https://github.com\",\n    facebook: \"https://www.facebook.com\",\n    instagram: \"https://www.instagram.com\",\n    etc: \"https://www.google.com/\",\n  },\n  utterances: {\n    repo: \"{YOUR_GITHUB_NAME}/{YOUR_REPOSITORY_NAME}\",\n    type: \"pathname\",\n  },\n}\n```\n\ngatsby-starter-hoodie provides a configuration file called `blog-config.js`. In this file, you can configure blog, biography (profile), and utterance. The website settings you are currently viewing are as above.\n\nConfigure `blog-config.js` to suit your blog. However, it is recommended not to modify `utterances.type`.\n\n### Change profile image\n\nReplace `static/profile.png` with the image you want. To change the image file name, you need to change the source code of `src/components/Bio.jsx`.\n\n## 5. Add your content\n\nMarkdown content is in `contents/posts`. You can write and add your articles like the sample posts here. [Click here](/writing-guide) to see the detail writing guide.\n\n## 6. Deploy your blog\n\n### 6-1 via Netlify\n\nFollow the Connecting to Netlify steps in [A Step-by-Step Guide: Gatsby on Netlify](https://www.netlify.com/blog/2016/02/24/a-step-by-step-guide-gatsby-on-netlify/). It's not difficult.\n\nIf you connect the github repository using Netlify, it is automatically distributed whenever you push it, so it is convenient.\n\n### 6-2. via Github Pages\n\n#### Case 1\n\nIf the repository name is in the form of `{YOUR_GITHUB_NAME} .github.io`, run it below.\n\n```\n$ npm run deploy-gh\n```\n\n#### Case 2\n\nIf the repository name is not in the form of `{YOUR_GITHUB_NAME} .github.io`, run it below.\n\n```\n$ npm run deploy-gh-prefix-paths\n```\n\nIn the above case, you need to change `pathPrefix` in `gatsby-config.js` to your repository name.\n\n### 6-3. other platforms\n\n```\n$ npm run build\n```\n\nYou can build the gatsby website with the command above. The build output is created in the `/public` directory. Deploy the `/public` directory using the command for the platform you want to deploy.\n\n## 7. Cutomize\n\n### Project Structure\n\nYou can customize your own gatsby-starter-hoodie by referring to the following file structure 🙊.\n\n```\n├── node_modules\n├── contents\n│   └── posts // your articles are here\n├── public // build outputs are here\n└── src\n    ├── assets\n    │   └── theme // theme config is here\n    ├── components\n    │   └── Article\n    │       └── Body\n    │           └── StyledMarkdown\n    │               └── index.jsx // markdown styles are here\n    │   ...\n    ├── fonts // webfonts are here\n    ├── hooks\n    ├── images\n    ├── pages // page components are here\n    ├── reducers\n    ├── templates // post components are here\n    └── utils\n```\n"},{"excerpt":"About gatsby-starter-hoodie gatsby-starter-hoodie is a gatsby theme created for writing tech blogs. Markdown, Code Highlighting in various programming languages, and Katex syntax are supported. Also,…","fields":{"slug":"/about-hoodie/"},"frontmatter":{"date":"May 01, 2021","title":"🎇 1. About gatsby-starter-hoodie","tags":["hoodie","about"]},"rawMarkdownBody":"\n## About gatsby-starter-hoodie\n\ngatsby-starter-hoodie is a gatsby theme created for writing tech blogs. Markdown, Code Highlighting in various programming languages, and Katex syntax are supported. Also, you can easily categorize articles into tags and series.\n\nStart your blog with a neatly designed gatsby-starter-hoodie that supports dark mode.\n\n## Features\n\n- Markdown\n- Code Highlighting\n- Katex Syntax\n- Dark Mode (Responsive to the settings of the OS)\n- Tag Categoriazation\n- Series Categorization\n- Responsive Web\n- SEO\n- Utterance (Comment widget)\n\n## Let's get started\n\nFollow the [Quick Start](/quick-start)\n"},{"excerpt":"1. 문제 설명 트리의 루트 노드가 주어지면 트리의 지름을 반환하시오. (단, 트리의 지름은 두 노드 간 가장 긴 경로를 뜻한다.) 42 2. 제약 조건 한 트리에 있는 노드의 개수는 0개 이상 \\(10^4\\)개 이하다. 노드의 값은 \\(-100\\) 이상 \\(100\\) 이하다. 3. 접근 트리의 지름은 정의상 어떤 리프 노드에서 다른 리프 노드까지의 경로…","fields":{"slug":"/l-543/"},"frontmatter":{"date":"May 01, 2021","title":"[L543] Diameter of Binary Tree","tags":["leetcode"]},"rawMarkdownBody":"\r\n## 1. 문제 설명\r\n\r\n트리의 루트 노드가 주어지면 트리의 지름을 반환하시오. (단, 트리의 지름은 두 노드 간 가장 긴 경로를 뜻한다.)\r\n\r\n![42](https://user-images.githubusercontent.com/54312875/116781236-a8f2f380-aabc-11eb-8f1b-b0d632b2e4b1.png)\r\n\r\n-----\r\n\r\n## 2. 제약 조건\r\n\r\n1. 한 트리에 있는 노드의 개수는 0개 이상 \\\\(10^4\\\\)개 이하다.\r\n3. 노드의 값은 \\\\(-100\\\\) 이상 \\\\(100\\\\) 이하다.\r\n\r\n-----\r\n\r\n## 3. 접근\r\n\r\n트리의 지름은 정의상 **어떤 리프 노드에서 다른 리프 노드까지의 경로**일 수밖에 없다. 만약 어떤 지름이 리프 노드가 아닌 노드를 포함하고 있다면, 리프 노드를 선택할 경우 언제나 거리가 늘어나기 때문에 모순이 발생하기 때문이다.\r\n\r\n또한, 트리의 지름은 반드시 **어떤 서브 트리의 루트 노드**를 지나야 한다. 그 루트 노드가 트리 전체의 루트 노드일 필요는 없지만, 한 리프 노드가 다른 리프 노드와 만나기 위해서는 루트 노드를 지나는 것이 필연적이기 때문이다.\r\n\r\n따라서 트리의 모든 노드를 루트 노드라고 가정하고 왼쪽과 오른쪽 서브 트리의 최대 깊이를 구한 후, 그 합의 최댓값을 구하면 트리의 지름을 얻을 수 있을 것이다.\r\n\r\n정리하면, 필요한 연산은 아래와 같다.\r\n\r\n1. 한 노드에서 왼쪽과 오른쪽 서브 트리의 최대 깊이를 구하는 연산\r\n2. 1.에서 구한 최대 깊이의 전체 최댓값을 구하는 연산\r\n\r\n-----\r\n\r\n## 4. 구현\r\n\r\n```cpp\r\nclass Solution {\r\npublic:\r\n    \r\n    int maxDepth = -1;\r\n    \r\n    int diameterOfBinaryTree(TreeNode* root) {\r\n        \r\n        updateMaxDepth(root);\r\n        return maxDepth;\r\n    \r\n    }\r\n    \r\n    int updateMaxDepth(TreeNode* root){\r\n        \r\n        if(root == nullptr)\r\n            return 0;\r\n        \r\n        int left = updateMaxDepth(root->left);\r\n        int right = updateMaxDepth(root->right);\r\n        \r\n        // 전체 최댓값 갱신\r\n        maxDepth = max(maxDepth, left + right);\r\n        \r\n        // 양쪽 서브 트리의 깊이 중에서 가장 큰 값 + 자기 자신(1)\r\n        return max(left, right) + 1;\r\n        \r\n    }\r\n    \r\n};\r\n```\r\n\r\n-----\r\n\r\n## 5. 참고한 링크\r\n\r\n포럼에서 [가장 많은 업보트를 받은 코드](https://leetcode.com/problems/diameter-of-binary-tree/discuss/101132/Java-Solution-MaxDepth)를 참고했다.\r\n\r\n-----"},{"excerpt":"1. 문제 설명 두 이진 트리의 root1과 root2가 주어지면 이 둘을 병합하시오. (단, 겹치는 노드가 있으면 그 둘의 합을 새로운 노드로 한다.) 41 2. 제약 조건 병합은 트리의 루트에서부터 이루어져야 한다. 한 트리에 있는 노드의 개수는 0개 이상 2000개 이하다. 노드의 값은 \\(-10^4\\) 이상 \\(10^4\\) 이하다. 3. 접근 재귀…","fields":{"slug":"/l-617/"},"frontmatter":{"date":"May 01, 2021","title":"[L617] Merge Two Binary Trees","tags":["leetcode"]},"rawMarkdownBody":"\r\n## 1. 문제 설명\r\n\r\n두 이진 트리의 root1과 root2가 주어지면 이 둘을 병합하시오. (단, 겹치는 노드가 있으면 그 둘의 합을 새로운 노드로 한다.)\r\n\r\n![41](https://user-images.githubusercontent.com/54312875/116778924-81e1f500-aaaf-11eb-9e59-23138d42d3a4.png)\r\n\r\n-----\r\n\r\n## 2. 제약 조건\r\n\r\n1. 병합은 트리의 루트에서부터 이루어져야 한다.\r\n2. 한 트리에 있는 노드의 개수는 0개 이상 2000개 이하다.\r\n3. 노드의 값은 \\\\(-10^4\\\\) 이상 \\\\(10^4\\\\) 이하다.\r\n\r\n-----\r\n## 3. 접근\r\n\r\n\r\n재귀적으로 트리를 DFS 순회하되, 매 단계마다 새로운 노드를 만들었다.\r\n\r\n```cpp\r\nclass Solution {\r\npublic:\r\n    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {\r\n        \r\n        if(root1 == nullptr && root2 == nullptr)\r\n            return nullptr;\r\n        \r\n        TreeNode* root;\r\n        \r\n        if(root1 != nullptr && root2 != nullptr){\r\n            root->val = root1->val + root2->val;\r\n            root->left = mergeTrees(root1->left, root2->left);\r\n            root->right = mergeTrees(root1->right, root2->right);\r\n        }\r\n        else if(root1 != nullptr && root2 == nullptr){\r\n            root->val = root1->val;\r\n            root->left = mergeTrees(root1->left, nullptr);\r\n            root->right = mergeTrees(root1->right, nullptr);\r\n        }\r\n        else if(root1 == nullptr && root2 != nullptr){\r\n            root->val = root2->val;\r\n            root->left = mergeTrees(nullptr, root2->left);\r\n            root->right = mergeTrees(nullptr, root2->right);\r\n        }\r\n        \r\n        return root;\r\n    \r\n    }\r\n};\r\n```\r\n\r\n그러나 이 방식은 좋지 않은데, 굳이 새로 만들 필요가 없는 노드를 생성하고 있다는 점에서 낭비가 발생하기 때문이다. 두 트리의 노드가 겹치지 않으면 기존의 노드를 재활용하면 된다. \r\n\r\n사실, 노드가 겹쳐지더라도 굳이 새 노드를 만들 필요는 없다. 바뀌어야 하는 것은 노드의 값뿐이기 때문에, **기존 노드의 값을 갱신**하여 새로운 트리에 연결해 주었다.\r\n\r\n```cpp\r\nclass Solution {\r\npublic:\r\n    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {\r\n        \r\n        if(root1 == nullptr && root2 == nullptr)\r\n            return nullptr;\r\n        \r\n        if(root1 == nullptr)\r\n            return root2;\r\n        \r\n        if(root2 == nullptr)\r\n            return root1;\r\n        \r\n        root1->val = root1->val + root2->val;\r\n        root1->left = mergeTrees(root1->left, root2->left);\r\n        root1->right = mergeTrees(root1->right, root2->right);\r\n        \r\n        return root1;\r\n    \r\n    }\r\n};\r\n```\r\n\r\n-----\r\n\r\n## 4. 구현\r\n\r\n두 번째 접근에서 아래 부분은 불필요한 코드다. 두 포인터 모두 `nullptr`인 경우, 그 두 개 중에서 하나만 반환하면 되기 때문이다.\r\n\r\n```cpp\r\nif(root1 == nullptr && root2 == nullptr)\r\n    return nullptr;\r\n```\r\n\r\n이러한 점을 고려하여 최종적으로 리팩토링한 코드는 아래와 같다.\r\n\r\n```cpp\r\nclass Solution {\r\npublic:\r\n    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {\r\n        \r\n        if(root1 == nullptr)\r\n            return root2;\r\n        \r\n        if(root2 == nullptr)\r\n            return root1;\r\n        \r\n        root1->val += root2->val;\r\n        root1->left = mergeTrees(root1->left, root2->left);\r\n        root1->right = mergeTrees(root1->right, root2->right);\r\n        \r\n        return root1;\r\n    \r\n    }\r\n};\r\n```\r\n-----"},{"excerpt":"1. 문제 설명 주어진 일방향 링크드 리스트가 팰린드롬인지 판별하시오. 37 2. 제약 조건 리스트 내 노드의 개수는 1개부터 \\(10^5\\)개까지 존재한다. 한 노드의 값은 0부터 9까지다. (선택) 시간 복잡도 O(n), 공간 복잡도 O(1)으로 해결해야 한다. 3. 접근 9. Palindrome Number와 비슷한 문제지만, 접근 방식이 조금 달라…","fields":{"slug":"/l-234/"},"frontmatter":{"date":"April 30, 2021","title":"[L234] Palindrome Linked List","tags":["leetcode"]},"rawMarkdownBody":"\r\n## 1. 문제 설명\r\n\r\n주어진 일방향 링크드 리스트가 팰린드롬인지 판별하시오.\r\n\r\n![37](https://user-images.githubusercontent.com/54312875/116727575-b6a66b80-aa1f-11eb-90da-f48a34fd9505.png)\r\n\r\n-----\r\n\r\n## 2. 제약 조건\r\n\r\n1. 리스트 내 노드의 개수는 1개부터 \\\\(10^5\\\\)개까지 존재한다.\r\n2. 한 노드의 값은 0부터 9까지다.\r\n3. <span style=\"color:grey\">(선택)</span> 시간 복잡도 O(n), 공간 복잡도 O(1)으로 해결해야 한다.\r\n\r\n-----\r\n\r\n## 3. 접근\r\n\r\n[9. Palindrome Number](https://leetcode.com/problems/palindrome-number/)와 비슷한 문제지만, 접근 방식이 조금 달라져야 한다. 리스트 내 노드의 개수가 열 개를 넘어가면 자연수로 쳤을 때 10억을 훌쩍 넘기기 때문이다. 하지만 문제의 본질은 같다.\r\n\r\n관건은 입력받은 리스트의 절반을 **뒤집었을 때, 그 뒤집은 부분이 나머지 부분과 같은지** 확인하는 것이다.\r\n\r\n- 홀수 개 노드의 경우 : 1 - 2 - 4 - 2 - 1\r\n- 짝수 개 노드의 경우 : 1 - 5 - 5 - 1\r\n\r\n9번 문제에서는 입력받은 정수에 모듈로 연산과 나눗셈 연산을 시행하여 간단하게 뒤집을 수 있었지만, 이 문제는 **리스트**가 주어지므로 아래와 같은 연산이 필요하다.\r\n\r\n1. 리스트의 중간 노드를 찾아 그 위치를 반환하는 연산\r\n2. 리스트의 절반을 뒤집는 연산\r\n\r\n-----\r\n\r\n### 3-1. 리스트의 중간 노드를 찾는 연산\r\n\r\n가장 먼저 떠오른 방법은 리스트를 순회하여 노드의 총 개수를 구하는 것이었다.\r\n\r\n그렇게 구한 노드의 개수가 홀수 개인 경우 \\\\(\\frac{n}{2} + 1\\\\)번째 노드가 중간 노드이고, 짝수 개인 경우에도 마찬가지로 해당 노드가 뒤집어야 하는 부분의 시작점이다.\r\n\r\n그러나 이 방법은 중간 노드를 한 번의 순회만으로 찾을 수 없다.\r\n\r\n그렇게 해서 나온 방법이 바로 **두 개의 포인터**를 사용하는 방법이다. slow 포인터는 노드를 1개씩 방문하고, fast 포인터는 노드를 2개씩 건너뛰면서 방문한다.\r\n\r\n![unnamed](https://user-images.githubusercontent.com/54312875/116774493-d7aaa300-aa97-11eb-879f-1ae165cf9ca9.jpg)\r\n\r\n이렇게 하면 slow 포인터는 언제나 fast 포인터의 중간 지점을 가리키게 된다. 뒤집을 때는 slow 포인터의 다음 노드를 시작점으로 한다.\r\n\r\n-----\r\n\r\n### 3-2. 리스트의 절반을 뒤집는 연산\r\n\r\n![5](https://user-images.githubusercontent.com/54312875/116742448-579e2200-aa32-11eb-94aa-f591d9c31dc3.jpg)\r\n\r\nA부터 이동하면서 위와 같은 순서로 포인터를 변경하면 리스트를 뒤집을 수 있다.\r\n\r\n-----\r\n\r\n## 4. 구현\r\n\r\n```cpp\r\n/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     ListNode *next;\r\n *     ListNode() : val(0), next(nullptr) {}\r\n *     ListNode(int x) : val(x), next(nullptr) {}\r\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\r\n * };\r\n */\r\n\r\nclass Solution {\r\npublic:\r\n    bool isPalindrome(ListNode* head) {\r\n        \r\n        if(head == nullptr || head->next == nullptr)\r\n            return true;\r\n    \r\n        ListNode* middle = findMiddle(head);\r\n        ListNode* half = flipList(middle->next);\r\n        \r\n        return isSame(head, half);\r\n        \r\n    }\r\n    \r\n    ListNode* findMiddle(ListNode* start){\r\n        \r\n        ListNode* slow = start;\r\n        ListNode* fast = start;\r\n        \r\n        while(fast->next != nullptr && fast->next->next != nullptr){\r\n            slow = slow->next;\r\n            fast = fast->next->next;\r\n        }\r\n        \r\n        return slow;\r\n        \r\n    }\r\n    \r\n    ListNode* flipList(ListNode* start){\r\n        \r\n        ListNode* store = nullptr;\r\n        ListNode* update = nullptr;\r\n        \r\n        while(start != nullptr){\r\n            store = start->next;\r\n            start->next = update;\r\n            update = start;\r\n            start = store;\r\n        }\r\n        \r\n        return update;\r\n        \r\n    }\r\n    \r\n    bool isSame(ListNode* head, ListNode* half){\r\n        \r\n        while(half != nullptr){\r\n            if(head->val != half->val)\r\n                return false;\r\n            head = head->next;\r\n            half = half->next;\r\n        }\r\n        \r\n        return true;\r\n        \r\n    }\r\n    \r\n};\r\n```\r\n\r\n-----\r\n\r\n## 5. 예외 처리 및 주의사항\r\n리스트에 노드가 없거나 노드가 하나인 경우, 무조건 참을 반환한다.\r\n```cpp\r\nbool isPalindrome(ListNode* head) {\r\n    \r\n    if(head == nullptr || head->next == nullptr)\r\n        return true;\r\n\r\n    // ...\r\n\r\n}\r\n```\r\n또한, `half`는 리스트의 중간부터 시작하기 때문에 끝을 더 빨리 맞닥뜨리게 되므로, `half`를 기준으로 반복문의 조건을 설정한다.\r\n\r\n```cpp\r\nbool isSame(ListNode* head, ListNode* half){\r\n    \r\n    while(half != nullptr){\r\n        // ...\r\n    }\r\n    \r\n}\r\n```\r\n-----\r\n\r\n## 6. 재귀를 활용한 풀이\r\n\r\n재귀로 풀이할 수도 있다. 이 경우 콜 스택 때문에 공간 복잡도는 O(n)이 되지만, 아주 짧은 코드로 문제를 해결할 수 있다는 점에서 매력적이다. [아래 코드](https://leetcode.com/problems/palindrome-linked-list/discuss/64490/My-easy-understand-C%2B%2B-solution)는 포럼에서 가장 많은 추천을 받은 C++ 재귀 코드로, 변수명을 리팩토링하여 가져왔다.\r\n\r\n```cpp\r\nclass Solution {\r\npublic:\r\n    ListNode* forward;\r\n    \r\n    bool isPalindrome(ListNode* head) {\r\n        forward = head;\r\n        return check(head);\r\n    }\r\n    \r\n    bool check(ListNode* backward) {\r\n        if (backward == nullptr) return true;\r\n        \r\n        bool isPal = check(backward->next) && (forward->val == backward->val);\r\n        forward = forward->next;\r\n        \r\n        return isPal;\r\n    }\r\n};\r\n```\r\n여기서 주목해야 할 포인터는 `forward`와 `backward`이다. \r\n\r\n`backward`는 리스트의 끝까지 재귀적으로 방문했다가 반환되면서 거꾸로 돌아오고, `forward`는 `backward`가 한 칸씩 뒤로 이동할 때마다 앞으로 이동하는 **전역 변수**다. 따라서 이 둘을 비교하면 주어진 리스트가 팰린드롬인지 알아낼 수 있게 된다.\r\n\r\n이 접근이 상대적으로 비효율적인 이유는 리스트의 절반만 검사하는 게 아니라 첫번째 노드부터 마지막 노드까지 비교를 전부 진행하기 때문인데, 개선하려면 리스트의 중간 노드에서부터 재귀 호출을 시작해야 한다.\r\n\r\n-----"},{"excerpt":"파비콘은 어떻게 변경하나요?  에 파비콘 파일이 위치해 있습니다. 이미지 파일을 대체하면 파비콘을 변경할 수 있습니다. 만약 파비콘 파일의 이름을 변경하고 싶다면,  파일의  에서  속성을 변경하셔야합니다. Utterance 가 제대로 작동하지 않아요. http 환경에서는 Utterance 가 제대로 작동하지 않을 수 있습니다. 여러분의 웹사이트를 htt…","fields":{"slug":"/other-tips-kr/"},"frontmatter":{"date":"April 04, 2021","title":"🤩 4. 그 외 팁들","tags":["hoodie","other-tips"]},"rawMarkdownBody":"\n## 파비콘은 어떻게 변경하나요?\n\n`static/favicon.png` 에 파비콘 파일이 위치해 있습니다. 이미지 파일을 대체하면 파비콘을 변경할 수 있습니다.\n\n만약 파비콘 파일의 이름을 변경하고 싶다면, `gatsby-config.js` 파일의 `gatsby-plugin-manifest` 에서 `icon` 속성을 변경하셔야합니다.\n\n## Utterance 가 제대로 작동하지 않아요.\n\nhttp 환경에서는 Utterance 가 제대로 작동하지 않을 수 있습니다. 여러분의 웹사이트를 https 환경으로 제공하세요.\n\n## OG Image 를 설정하고 싶어요.\n\n`/static` 디렉토리의 `og-image.png` 파일을 여러분이 원하는 이미지 파일로 대체하세요.\n\n## 다른 질문이 있으신가요?\n\n이 문서에 댓글을 달거나 gatsby-starter-hoodie 레포지토리에 [이슈를 열어주세요](https://github.com/devHudi/gatsby-starter-hoodie/issues). 여러분의 참여가 gatsby-starter-hoodie 를 더욱 발전시킵니다. 감사해요 😎.\n"},{"excerpt":"1. 포스트 추가하기  경로에 새로운 마크다운 파일을 생성하여 여러분의 글을 추가할 수 있습니다. 1-1. 포스트 파일 구조 새로운 문서를 추가하는 방법에는 두가지가 있습니다. 첫번째는 디렉토리 없이 문서를 생성하는 방법입니다. 만약 여러분이 Javascript 에 관한 문서를 생성한다면,  파일을  디렉토리에 추가할 수 있습니다. 두번째 방법은 먼저 디…","fields":{"slug":"/writing-guide-kr/"},"frontmatter":{"date":"April 03, 2021","title":"🤔 3. 작성 가이드","tags":["hoodie","writing-guide"]},"rawMarkdownBody":"\n## 1. 포스트 추가하기\n\n`contents/post` 경로에 새로운 마크다운 파일을 생성하여 여러분의 글을 추가할 수 있습니다.\n\n### 1-1. 포스트 파일 구조\n\n새로운 문서를 추가하는 방법에는 두가지가 있습니다. 첫번째는 디렉토리 없이 문서를 생성하는 방법입니다. 만약 여러분이 Javascript 에 관한 문서를 생성한다면, `about-javascript.md` 파일을 `contents/posts` 디렉토리에 추가할 수 있습니다.\n\n두번째 방법은 먼저 디렉토리를 생성한 뒤, 디렉토리 안에 `index.md` 파일을 추가하는 것 입니다. 이 방법은 문서 내에 여러 이미지 파일 등 부수적인 파일 여러개가 포함되었을 때 유용합니다.\n\n첫번째 방법으로 생성한 파일명이나, 두번째 방법으로 생성한 디렉토리 이름은 웹사이트에서 고유의 주소를 갖습니다. `https://siteURL/about-javascript` 와 같이요.\n\n### 1-2. Frontmatter\n\n마크다운은 문서의 메타데이터인 Frontmatter 라 불리는 정보를 가지고 있습니다.\n\n```\n---\ntitle: \"🤔 3. 작성 가이드\"\ndescription: \"어떻게 글을 작성하고 추가할까요?\"\ndate: 2021-04-03\nupdate: 2021-04-03\ntags:\n  - hoodie\n  - writing-guide\nseries: \"gatsby-starter-hoodie 로 블로그 시작하기\"\n---\n```\n\n위는 지금 여러분이 읽고 있는 문서의 Frontmatter 입니다. `title` 과 `date` 는 필수 값입니다. 띄어쓰기를 포함된 문자열을 입력할 때에는 따옴표로 감싸는 것을 추천합니다.\n\n### 1-3. 마크다운 작성하기\n\n만약 Frontmatter 까지 작성했다면, 여러분은 그 아래에 마크다운 문서를 작성하면 됩니다. gatsby-starter-hoodie 는 대부분의 마크다운 문법을 지원합니다. 마크다운 작성 방법을 알고 싶다면, Github 의 [Mastering Markdown](https://guides.github.com/features/mastering-markdown/) 문서를 참고하세요.\n\n## 2. 코드 하이라이팅 & Katex\n\n### 2-1. 코드 하이라이팅\n\nPrism.JS 에 기반한 코드 하이라이팅이 제공됩니다.\n\n#### 예시\n\nJavascript\n\n```javascript\nconsole.log(\"Hello, world!\")\n```\n\nPython\n\n```python\nprint(\"Hello, world!\")\n```\n\n그 외 더 많은 언어를 제공합니다. 제공되는 언어를 확인하고 싶다면, [Prism.js 웹사이트](https://prismjs.com/) 를 참고하세요.\n\n### 2-2. Katex\n\nKatex 문법을 지원하여 복잡한 수식도 쉽게 표현할 수 있습니다.\n\n#### 인라인 모드\n\n$$E = m c^{2}$$\n\n#### 블럭 모드\n\n$$\n\\int_{0}^{\\infty} f(x) dx\n$$\n\n## 3. 글에 이미지 추가하기\n\n상대경로를 이용하여 쉽게 이미지를 추가할 수 있습니다. 디렉토리를 생성하고 그 안에 `index.md` 를 추가하여, 글을 추가하는 방법으로 작성해야 이미지 관리가 쉽습니다.\n\n![샘플 이미지 캡션](sample-image.jpg)\n\n이미지는 Lazy Loading 으로 로드되어, 빠른 초기 문서 로딩 속도를 확보할 수 있습니다.\n\n> ⚠ 이미지의 모든 확장자는 소문자여야합니다.\n\n## 4. 태그\n\n![](tag-example.jpg)\n\nFrontmatter 의 태그를 통해 쉽게 문서를 분류하고 검색할 수 있습니다. 여러분의 모든 태그는 `https://siteUrl/tags` 경로에서 확인하고, 검색할 수 있습니다.\n\n## 5. 시리즈\n\n![](series-example.jpg)\n\n여러분이 연관된 여러개의 문서를 작성할 때 시리즈를 사용할 수 있습니다. Frontmatter 에 작성된 시리즈가 같은 문서끼리 묶여 문서 상단에 리스트로 표시됩니다. 시리즈는 일련의 순서가 있는 문서들을 작성할 때 유용하게 사용할 수 있습니다. 시리즈는 문서의 작성 날짜 순서대로 정렬됩니다.\n\n현재 문서는 `gatsby-starter-hoodie 로 블로그 시작하기` 라는 시리즈로 설정되어 있습니다.\n"},{"excerpt":"아래 단계를 따라서 여러분의 블로그를 시작하세요. 굉장히 쉬워요 😉. 1. Gatsby 사이트 생성 컴퓨터에 node.js 와 gatsby-cli 가 설치되어 있어야합니다. 2. 개발 서버 시작 이제 localhost:8000 으로 여러분의 블로그를 접속할 수 있습니다. 3. Github 레포지토리 생성 Utterance 댓글 위젯은 Github 이슈 시…","fields":{"slug":"/quick-start-kr/"},"frontmatter":{"date":"April 02, 2021","title":"🚀 2. 빠르게 시작하기","tags":["hoodie","quick-start"]},"rawMarkdownBody":"\n아래 단계를 따라서 여러분의 블로그를 시작하세요. 굉장히 쉬워요 😉.\n\n## 1. Gatsby 사이트 생성\n\n> 컴퓨터에 **node.js** 와 **gatsby-cli** 가 설치되어 있어야합니다.\n\n```\n$ npx gatsby new my-hoodie-blog https://github.com/devHudi/gatsby-starter-hoodie\n```\n\n## 2. 개발 서버 시작\n\n```\n$ cd my-hoodie-blog\n$ npm run start\n```\n\n이제 localhost:8000 으로 여러분의 블로그를 접속할 수 있습니다.\n\n## 3. Github 레포지토리 생성\n\nUtterance 댓글 위젯은 **Github 이슈 시스템** 기반입니다. 따라서 각 블로그 별 Github 레포지토리가 필요합니다. 또한 여러분이 Github Pages 혹은 Netlify 로 블로그를 배포하길 원한다면, Github 레포지토리는 필수입니다.\n\n만약 Github 레포지토리를 생성하는 법을 모른다면, [Github 공식 문서](https://docs.github.com/en/github/getting-started-with-github/create-a-repo) 를 참조하세요.\n\n### 원격 레포지토리 등록\n\n```\ngit remote add origin https://github.com/{YOUR_GITHUB_NAME}/{YOUR_REPOSITORY_NAME}\n```\n\n## 4. blog-config.js 작성\n\n```javascript\nmodule.exports = {\n  title: \"MY BLOG\",\n  description: \"Hello, This is my blog\",\n  author: \"YOUR NAME\",\n  siteUrl: \"https://myblog.com\",\n  links: {\n    github: \"https://github.com\",\n    facebook: \"https://www.facebook.com\",\n    instagram: \"https://www.instagram.com\",\n    etc: \"https://www.google.com/\",\n  },\n  utterances: {\n    repo: \"{YOUR_GITHUB_NAME}/{YOUR_REPOSITORY_NAME}\",\n    type: \"pathname\",\n  },\n}\n```\n\ngatsby-starter-hoodie 는 `blog-config.js` 라는 설정 파일을 제공합니다. 이 파일에서 블로그 정보, 작성자 프로필, Utterance 설정 등을 작성할 수 있습니다. 여러분 블로그 설정에 맞게 `blog-config.js` 를 설정하세요. 하지만, `utterances.type` 속성은 수정하지 않는 것을 권장합니다.\n\n### 프로필 이미지 변경\n\n`static/profile.png` 에 위치한 이미지 파일을 원하는 이미지 파일로 교체하세요. 만약 파일명을 변경하고 싶다면, `src/components/Bio.jsx` 의 소스코드를 수정해야합니다.\n\n## 5. 포스트 추가\n\n마크다운 포스트는 `contents/posts` 경로에 위치해있습니다. 해당 경로에서 글을 작성할 수 있습니다. [여기를 클릭하여](https://devHudi.github.io/gatsby-starter-hoodie/writing-guide) 더 자세한 글 작성 방법을 확인하세요.\n\n## 6. 블로그 배포하기\n\n### 6-1 Netlify 를 통해\n\n[A Step-by-Step Guide: Gatsby on Netlify](https://www.netlify.com/blog/2016/02/24/a-step-by-step-guide-gatsby-on-netlify/) 문서를 참조하여, Netlify 를 Github 레포지토리와 연결할 수 있습니다. 이 과정은 어렵지 않습니다.\n\nGithub 레포지토리와 연결이 되었다면, Github 레포지토리에 변경사항이 발생할 때 마다 자동으로 여러분의 블로그에 배포됩니다.\n\n### 6-2. Github Pages 를 통해\n\n#### 상황 1\n\n레포지토리 이름이 `{YOUR_GITHUB_NAME}.github.io` 형태일 경우, 아래 명령어를 실행해주세요.\n\n```\n$ npm run deploy-gh\n```\n\n#### 상황 2\n\n레포지토리 이름이 `{YOUR_GITHUB_NAME}.github.io` 형태가 아닐 경우, 아래 명령어를 실행해주세요.\n\n```\n$ npm run deploy-gh-prefix-paths\n```\n\n만약 위와 같은 경우 `gatsby-config.js` 에서 `pathPrefix` 를 여러분의 레포지토리 이름으로 바꿔야합니다.\n\n### 6-3. 다른 플랫폼\n\n```\n$ npm run build\n```\n\n위 명령어로 Gastby 웹사이트를 빌드할 수 있습니다. 빌드 결과물은 `/public` 에 저장됩니다. `/public` 디렉토리를 여러분이 사용하는 플랫폼의 배포 명령을 통해 배포해주세요.\n\n## 7. 커스터마이징\n\n### 프로젝트 구조\n\n아래 프로젝트 구조를 참고하여 커스터마이징 할 수 있습니다 🙊.\n\n```\n├── node_modules\n├── contents\n│   └── posts // your articles are here\n├── public // build outputs are here\n└── src\n    ├── assets\n    │   └── theme // theme config is here\n    ├── components\n    │   └── Article\n    │       └── Body\n    │           └── StyledMarkdown\n    │               └── index.jsx // markdown styles are here\n    │   ...\n    ├── fonts // webfonts are here\n    ├── hooks\n    ├── images\n    ├── pages // page components are here\n    ├── reducers\n    ├── templates // post components are here\n    └── utils\n```\n"},{"excerpt":"gatsby-starter-hoodie 에 대하여 gatsby-starter-hoodie 는 기술 블로그를 작성하기 위해 개발된 Gatsby 테마입니다. 마크다운과 많은 프로그래밍 언어의 코드 하이라이팅, 그리고 Katex 문법을 지원합니다. 또한 태그와 시리즈를 통하여 쉽게 게시물을 분류할 수 있습니다. 다크모드를 지원하는 깔끔한 디자인의 gatsby-…","fields":{"slug":"/about-hoodie-kr/"},"frontmatter":{"date":"April 01, 2021","title":"🎇 1. gatsby-starter-hoodie 에 대하여","tags":["hoodie","about"]},"rawMarkdownBody":"\n## gatsby-starter-hoodie 에 대하여\n\ngatsby-starter-hoodie 는 기술 블로그를 작성하기 위해 개발된 Gatsby 테마입니다. 마크다운과 많은 프로그래밍 언어의 코드 하이라이팅, 그리고 Katex 문법을 지원합니다. 또한 태그와 시리즈를 통하여 쉽게 게시물을 분류할 수 있습니다.\n\n다크모드를 지원하는 깔끔한 디자인의 gatsby-starter-hoodie 로 여러분의 블로그를 시작하세요.\n\n## 주요 기능\n\n- 마크다운\n- 코드 하이라이팅\n- Katex 문법\n- 다크모드 (OS 환경설정과 연동)\n- 태그 분류\n- 시리즈 분류\n- 반응형 웹\n- SEO\n- Utterance (댓글 위젯)\n\n## 시작\n\n[빠르게 시작하기](/quick-start-kr) 문서에서 블로그를 세팅하세요.\n"}]}},"pageContext":{}},"staticQueryHashes":[]}